#+TITLE: Wiz - A Scheme interpreter implemented in Haskell
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.0.92.2 (<a href="http://orgmode.org">Org</a> mode 8.3.4)
#+LATEX_HEADER:
#+SETUPFILE: ~/org/notes-style.org

http://i.imgur.com/qBnjlQI.png

* Current status
Lacking the basic mechanisms to implement closures, currently the project is simply
an implementation of the [[https://mitpress.mit.edu/sicp/full-text/sicp/book/node10.html][substitution model]].

* Todo

There surely are many things yet to be done: 

- environment model
  - lexical binding
- `let`
- `define-syntax`
- proper testing 
- debugging aidsâ€¦ 
- a certain dose of I/O functions (I'm curious about the changes they will require in the core!), 
- proper packaging

Just to name a few. But one particular idea I have in mind is
implementing some sort of graphical primitives in the language in
order to obtain a system useful to experiment with geometry.

* [[https://github.com/larsen/wiz][Project repository]]

* Project log

I started this project with a few goals in mind:

- Implement enough Scheme to assist a student following the examples
  in [[https://mitpress.mit.edu/books/little-schemer][The Little Schemer]]
- Understand what's the minimal Scheme core that *must* be
  implemented, and on the other hand how much can be defined in terms
  of these primitives
- Produce some stylistically sound Haskell code
- Learn more Haskell in the process

There's still work to do for the first three points, but I'm
definitely learning a lot.

** The implementation

   My implementation is still a work in progress but I guess the core
   won't be subject to radical changes, so here a quick review of its
   main parts. [[https://github.com/larsen/wiz][Code is available on github]].

   I'm following the design described in [[https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%25_toc_start][Chapter 4]] of [[https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%25_toc_start][Structure and
Interpretation of Computer Programs]] if you're familiar with the book
I'm sure you won't find anything new.

   Types were the trickiest part to write -- at least for me -- so
I'll start from them.

*** Types

A `Program` is a collection of `Form`s:

#+BEGIN_SRC haskell
data Program = Program [Form]
#+END_SRC

A `Form` can be either a `Definition` or an `Expression`:

#+BEGIN_SRC haskell
data Form = FDef Definition | FExpr Expression
  deriving (Show)
#+END_SRC

A `Definition` binds a `Symbol` (represented as a `String`) to an
`Expression`.

#+BEGIN_SRC haskell
data Definition = Definition String Expression
  deriving (Show)
#+END_SRC

`Expression`s are more complex and have many faces:

#+BEGIN_SRC haskell
data Expression = Number Integer
                | Boolean Bool
                | Operator Char
                | Symbol String
                | Quote Expression
                | If Expression Expression Expression
                | Lambda Formals Expression
                | List [Expression]
                  deriving (Eq)
#+END_SRC

*** Eval/Apply

    In order to perform something useful we must be able to evaluate
`Form`s. Evaluation happens in an `Environment`, which is a mapping
from `Symbol`s to `Expression`s.

#+BEGIN_SRC haskell
data Environment = Environment (Map.Map String Expression)
                   deriving (Eq)
#+END_SRC

In other words, the `Environment` tells us what `Expression` we need
to evaluate to know the value of a `Symbol` (notice the recursive
nature of this notion).

`eval` is the only function exported by the `Wiz.EvalApply` module.
It takes an `Environment` and a `Form`, and returns a pair composed by
a possibly new `Environment` and an `Expression` representing the
return value of the `Form`.

#+BEGIN_SRC haskell
eval :: Form -> Environment -> (Environment, Maybe Expression)
eval form env =
  case form of
    FDef def   -> (evalDefinition def env, Nothing)
    FExpr expr -> (env, Just $ evalExpr env expr)
#+END_SRC

Evaluating a `Definition` adds a new mapping in the
`Environment`. It's the only thing that produces a side-ezffect,
namely a variation in the `Environment` in which we'll evaluate future
forms.

#+BEGIN_SRC haskell
evalDefinition :: Definition -> Environment -> Environment
evalDefinition (Definition symbol expr) (Environment env) =
  Environment (Map.insert symbol expr env)
#+END_SRC

Evaluating an `Expression` yields another simpler `Expression`, until
we reach an atomic value (so far they are `Number`s, `Boolean`s and
procedures) that we are able to display.

#+BEGIN_SRC haskell
evalExpr :: Environment -> Expression -> Expression
#+END_SRC

A special case is evaluating a procedure application (e.g. `(fact
10)`).  Assuming `fact` refers (in the current `Environment`) to a
procedure, we invoke `apply`.

#+BEGIN_SRC haskell
apply :: Environment -> Expression -> [Expression] -> Expression
#+END_SRC

To `apply` (or invoke) a procedure we must evaluate its body in a new
fabricated enviroment based on the original one but extended with
new symbols. These symbols are the formals parameters of the
procedure, their values are given by the expressions passed as
arguments in the procedure call.

#+BEGIN_SRC haskell
apply env (Lambda (Formals formals) body) arguments =
  evalExpr env' body
  where env' = extendEnvironment env (zip formals evaledArguments)
        extendEnvironment (Environment env) newElems =
          Environment (Map.union (Map.fromList newElems) env)
        evaledArguments = map (evalExpr env) arguments
#+END_SRC

*** The main loop

After reading some Scheme code in `init.scm` to initialize the
environment, we enter the main loop (I'm in love with this idea of
building basic language utilities expressed in the language itself).

The main loop is relatively simple. It receives a new form from user
input [[https://hackage.haskell.org/package/haskeline][I used Haskeline]] to implement the commandline), it parses it to
obtain an internal representation tree, and it `eval`s it. And so on.

** Some thoughts

As I said at the beginning my main goal is to learn: there's plenty of
Scheme implementations already, and many are written in Haskell. In
that respect designing and writing the interpreter has been so far
very rewarding. It's my first "real" Haskell program, and although
there are parts I want to reconsider profoundly (the parser
implementation is difficult to maintain, aesthetically orrible and in
a word suboptimal, to say the least) I am satisfied with the results.

Reasoning about types was difficult at the beginning: I expected that
but I didn't foresee all the false starts I had to discard before
arriving at something reasonable and working. Now that I'm more
proficient I experimented their immense usefulness for refactoring,
and generally speaking for reasoning about the program.
